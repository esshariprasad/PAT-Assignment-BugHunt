/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 16:42:43 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-3010));
      aVLTree0.delete(3232);
      aVLTree0.insert(0);
      aVLTree0.delete(3232);
      aVLTree0.insert(3232);
      aVLTree0.insert((-3080));
      aVLTree0.insert((-1));
      aVLTree0.insert((-1362));
      aVLTree0.insert((-3161));
      aVLTree0.insert((-3010));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree0.find((-3010));
      aVLTree_Node1.left = aVLTree_Node0;
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.height();
      aVLTree_Node1.key = 0;
      aVLTree0.delete(2);
      aVLTree0.insert((-2661));
      aVLTree0.height();
      aVLTree0.insert(2114);
      AVLTree.Node aVLTree_Node2 = aVLTree_Node1.right;
      aVLTree0.find(2114);
      aVLTree0.delete(0);
      aVLTree0.insert(1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-3010));
      aVLTree0.delete(3232);
      aVLTree0.insert(0);
      aVLTree0.delete(3232);
      aVLTree0.insert(3232);
      aVLTree0.insert((-1));
      aVLTree0.insert((-1362));
      aVLTree0.insert((-3161));
      aVLTree0.insert((-3010));
      aVLTree0.find(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.find((-3010));
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.insert((-2661));
      aVLTree0.height();
      aVLTree0.insert(2114);
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      aVLTree0.delete(0);
      aVLTree0.find(2114);
      aVLTree0.delete(0);
      aVLTree0.insert(1);
      aVLTree0.find(576);
      aVLTree0.find((-1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-3010));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(3232);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(3232);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(3232);
      assertEquals(1, aVLTree0.height());
      
      int int0 = 0;
      aVLTree0.insert((-1362));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-3161));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert((-3010));
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertNotNull(aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find((-3010));
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertNotNull(aVLTree_Node2);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertEquals(2, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals(2, aVLTree0.height());
      
      int int2 = aVLTree0.height();
      assertEquals(2, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, aVLTree0.height());
      
      int int3 = aVLTree0.height();
      assertEquals(2, int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert((-2661));
      assertEquals(2, aVLTree0.height());
      
      aVLTree_Node1.right = aVLTree_Node0;
      assertEquals(2, aVLTree0.height());
      
      int int4 = aVLTree0.height();
      assertEquals(2, int4);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertEquals(2, aVLTree0.height());
      
      int int5 = 2114;
      aVLTree0.insert(2114);
      AVLTree.Node aVLTree_Node3 = aVLTree_Node1.right;
      aVLTree0.delete(int0);
      aVLTree0.find(int5);
      int int6 = 0;
      aVLTree0.delete(int6);
      int int7 = 1;
      aVLTree0.insert(int7);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-3010));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(3232);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(3232);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(3232);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-3080));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(3232);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1362));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert((-3161));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert((-3010));
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNotNull(aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find((-3010));
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertNotNull(aVLTree_Node2);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertEquals(2, aVLTree0.height());
      
      aVLTree_Node1.left = aVLTree_Node0;
      assertEquals(2, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(2, int0);
      assertEquals(2, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals(2, int1);
      assertTrue(int1 == int0);
      assertEquals(2, aVLTree0.height());
      
      int int2 = aVLTree0.height();
      assertEquals(2, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert((-2661));
      assertEquals(2, aVLTree0.height());
      
      int int3 = aVLTree0.height();
      assertEquals(2, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert(2114);
      assertEquals(3, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node3 = aVLTree_Node1.right;
      assertNotSame(aVLTree_Node3, aVLTree_Node2);
      assertNotSame(aVLTree_Node3, aVLTree_Node0);
      assertNotSame(aVLTree_Node3, aVLTree_Node1);
      assertNotNull(aVLTree_Node3);
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node2));
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node1));
      
      AVLTree.Node aVLTree_Node4 = aVLTree0.find(2114);
      assertNotSame(aVLTree_Node4, aVLTree_Node0);
      assertNotSame(aVLTree_Node4, aVLTree_Node3);
      assertNotSame(aVLTree_Node4, aVLTree_Node1);
      assertNotSame(aVLTree_Node4, aVLTree_Node2);
      assertNotNull(aVLTree_Node4);
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node3));
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node2));
      assertEquals(3, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(3, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(889);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(889);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node1.right = aVLTree_Node0;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.height = 1077;
      assertEquals(1077, aVLTree0.height());
      
      aVLTree_Node1.key = 1;
      assertEquals(1077, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1080, aVLTree0.height());
      
      aVLTree_Node1.key = (-39);
      assertEquals(1080, aVLTree0.height());
      
      aVLTree_Node0.key = 28;
      assertEquals(1080, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node1);
      assertEquals((-1080), int0);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(1080, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.new Node(1);
      assertNotNull(aVLTree_Node2);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertEquals(1080, aVLTree0.height());
      
      aVLTree0.delete(889);
      assertEquals(1083, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node3 = aVLTree_Node1.left;
      assertNotSame(aVLTree_Node3, aVLTree_Node2);
      assertNotSame(aVLTree_Node3, aVLTree_Node1);
      assertNotSame(aVLTree_Node3, aVLTree_Node0);
      assertNotNull(aVLTree_Node3);
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node2));
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node0));
      
      aVLTree0.delete((-1612));
      assertEquals(1086, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = (-1874);
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1874));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1874));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.key = (-2834);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1874));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, int1);
      assertSame(aVLTree_Node0, aVLTree_Node1);
      assertFalse(int1 == int0);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      int int0 = (-827);
      aVLTree0.insert((-827));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-827));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-827));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert((-2215));
      assertEquals(2, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = 889;
      aVLTree0.delete(889);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(889);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node1.right = aVLTree_Node0;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.height = 1077;
      assertEquals(1077, aVLTree0.height());
      
      aVLTree_Node1.key = 1;
      assertEquals(1077, aVLTree0.height());
      
      aVLTree_Node1.key = 0;
      assertEquals(1077, aVLTree0.height());
      
      aVLTree_Node0.key = 0;
      assertEquals(1077, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node1);
      assertEquals(1078, int1);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(int1 == int0);
      assertEquals(1077, aVLTree0.height());
      
      // Undeclared exception!
      aVLTree0.find(1078);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-3054));
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-3054));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-3054));
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-886));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertNotNull(aVLTree_Node2);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.height();
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node2.left = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(4, aVLTree0.height());
      
      int int3 = aVLTree0.getBalance(aVLTree_Node1);
      assertEquals(5, int3);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertSame(aVLTree_Node1, aVLTree_Node2);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(4, aVLTree0.height());
      
      int int4 = aVLTree0.getBalance(aVLTree_Node2);
      assertEquals(5, int4);
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(4, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.new Node((-1));
      assertNotNull(aVLTree_Node3);
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node2));
      assertEquals(4, aVLTree0.height());
      
      aVLTree_Node3.key = 1;
      assertEquals(4, aVLTree0.height());
      
      int int5 = aVLTree0.getBalance(aVLTree_Node3);
      assertEquals(0, int5);
      assertNotSame(aVLTree_Node3, aVLTree_Node0);
      assertNotSame(aVLTree_Node3, aVLTree_Node1);
      assertNotSame(aVLTree_Node3, aVLTree_Node2);
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node2));
      assertFalse(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      assertEquals(4, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node4 = aVLTree0.getRoot();
      assertSame(aVLTree_Node4, aVLTree_Node1);
      assertSame(aVLTree_Node4, aVLTree_Node2);
      assertNotSame(aVLTree_Node4, aVLTree_Node0);
      assertNotSame(aVLTree_Node4, aVLTree_Node3);
      assertNotNull(aVLTree_Node4);
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node3));
      assertEquals(4, aVLTree0.height());
      
      int int6 = aVLTree0.getBalance(aVLTree_Node4);
      assertEquals(5, int6);
      assertSame(aVLTree_Node4, aVLTree_Node1);
      assertSame(aVLTree_Node4, aVLTree_Node2);
      assertNotSame(aVLTree_Node4, aVLTree_Node0);
      assertNotSame(aVLTree_Node4, aVLTree_Node3);
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node3));
      assertTrue(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertTrue(int6 == int4);
      assertEquals(4, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(552);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1468);
      assertNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-3010));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(3232);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(3232);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(3232);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(3232);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1362));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-3161));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert((-3010));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertNotNull(aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find((-3010));
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertNotNull(aVLTree_Node2);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertEquals(2, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(2, int0);
      assertEquals(2, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals(2, int1);
      assertTrue(int1 == int0);
      assertEquals(2, aVLTree0.height());
      
      int int2 = aVLTree0.height();
      assertEquals(2, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert((-2661));
      assertEquals(2, aVLTree0.height());
      
      int int3 = aVLTree0.height();
      assertEquals(2, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert(2114);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.getRoot();
      assertNotSame(aVLTree_Node3, aVLTree_Node0);
      assertSame(aVLTree_Node3, aVLTree_Node1);
      assertNotSame(aVLTree_Node3, aVLTree_Node2);
      assertNotNull(aVLTree_Node3);
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node2));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node4 = aVLTree0.find(2114);
      assertNotSame(aVLTree_Node4, aVLTree_Node1);
      assertNotSame(aVLTree_Node4, aVLTree_Node2);
      assertNotSame(aVLTree_Node4, aVLTree_Node3);
      assertNotSame(aVLTree_Node4, aVLTree_Node0);
      assertNotNull(aVLTree_Node4);
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node2));
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node3));
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node0));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1492);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(849);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      assertNotNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(3712);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(2326);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(2326);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-4534));
      assertNotNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNull(aVLTree_Node1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(1019);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-4534));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find((-4534));
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertNotNull(aVLTree_Node2);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-4534));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      assertEquals((-1), aVLTree0.height());
      
      int int1 = (-1423);
      aVLTree0.insert((-1));
      aVLTree0.insert((-1423));
      // Undeclared exception!
      try { 
        aVLTree0.delete((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(763);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.key = 530;
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(763);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.key = 530;
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.getBalance(aVLTree_Node1);
      assertEquals(1, int2);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1598));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-818));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-818));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1115);
      assertNotNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      assertNull(aVLTree_Node1);
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1659));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(925);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(925);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-2116));
      assertNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(3225);
      int int0 = 1;
      aVLTree0.insert(1);
      int int1 = (-1);
      aVLTree0.insert((-1));
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete((-2541));
      aVLTree0.height();
      aVLTree0.find(583);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-761));
      aVLTree0.find((-761));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(192);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1437));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(524);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1840);
      aVLTree0.insert(0);
      aVLTree0.insert((-5080));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert((-4006));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(512);
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(7);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(1086);
      aVLTree0.height();
      aVLTree0.delete((-1234));
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.insert(1);
      aVLTree0.delete(1);
      aVLTree0.find(1);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.insert((-2265));
      aVLTree0.insert((-629));
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(3232);
      aVLTree0.insert((-1));
      aVLTree0.insert((-1362));
      aVLTree0.insert((-3161));
      aVLTree0.insert((-3010));
      aVLTree0.find(0);
      aVLTree0.getRoot();
      aVLTree0.insert((-2661));
      aVLTree0.insert(2114);
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      assertEquals(2, aVLTree0.height());
  }
}
